/* SPDX-FileCopyrightText: 2024  NVIDIA Corporation. All rights reserved.
 *
 * SPDX-License-Identifier: GPL-2.0-or-later */
#pragma once

namespace blender::io::usd {

/**
 * This function processes the USD stage generated by the USD hierarchy iterator to
 * change scene graph instancing prototypes from defined USD prims to abstract prims.
 *
 * In the following example, instance /root/proto/Plane_0 references prototype prim
 * /root/proto_001/Plane_0:
 *
 *   def Xform "root"
 *   {
 *       def Xform "proto_001"
 *       {
 *           def Xform "Plane_0"
 *           {
 *               def Mesh "Plane"
 *               {
 *               }
 *           }
 *       }
 *
 *       def Xform "proto"
 *       {
 *           def Xform "Plane_0" (
 *               instanceable = true
 *               prepend references = </root/proto_001/Plane_0>
 *           )
 *           {
 *           }
 *       }
 *   }
 *
 * The function will copy prototype /root/proto_001/Plane_0 under a new class prim
 * named /Proto and convert prim /root/proto_001/Plane_0 to be an instance referencing
 * the copied abstract prim /Proto/Plane_0.
 *
 *   def Xform "root"
 *   {
 *       def Xform "proto"
 *       {
 *           def Xform "Plane_0" (
 *               instanceable = true
 *               prepend references = </Proto/Plane_0>
 *           )
 *           {
 *           }
 *       }
 *
 *       def Xform "proto_001"
 *       {
 *           def Xform "Plane_0" (
 *               instanceable = true
 *               references = </Proto/Plane_0>
 *           )
 *           {
 *           }
 *       }
 *   }
 *
 *   class "Proto"
 *   {
 *       def Xform "Plane_0"
 *       {
 *           def Mesh "Plane"
 *           {
 *           }
 *       }
 *   }
 *
 * The algorithm will append a numerical suffix to the "Proto" class root to ensure paths for
 * each abstract prototype are unique.  E.g., multiple prototypes could be copied under new
 * abstract prims /Proto, /Proto2, /Proto3, etc.
 *
 * \param stage: Pointer to the stage to process
 *
 */
void process_scene_graph_instances(pxr::UsdStageRefPtr stage);

}  // namespace blender::io::usd
